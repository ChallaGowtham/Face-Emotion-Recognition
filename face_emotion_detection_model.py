# -*- coding: utf-8 -*-
"""FACE EMOTION DETECTION MODEL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rWl-1HfJxApu5o8OkliKLqQGO_bf2Ixa
"""

import pandas as pd 
import numpy as np
from tensorflow import keras
from keras import models, layers
from keras.models import Sequential,load_model
from keras.layers import Conv2D,MaxPooling2D,BatchNormalization,Dense,Dropout,Activation,Flatten
import cv2
from matplotlib import pyplot as plt
from keras.losses import categorical_crossentropy
from keras.optimizers import Adam
from keras.regularizers import l2

data=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/dataset.csv/fer2013.csv')
emotions={0:'Angry',1:'Disgust',2:'Fear',3:'Happy',4:'Sad',5:'Surprise',6:'Normal'}

def Grouping(data):
    image_arr=np.zeros(shape=(len(data), 48, 48, 1))
    image_lab=np.array(list(map(int, data['emotion'])))
    for i, row in enumerate(data.index):
        org_image=np.fromstring(data.loc[row,'pixels'],dtype=int,sep=' ')
        dup_image=np.reshape(org_image, (48, 48, 1))
        image_arr[i] = dup_image   
    return image_arr,image_lab
training_images,training_labels = Grouping(data[data["Usage"]=="Training"])
validation_images,validation_labels =Grouping(data[data["Usage"]=="PrivateTest"])
testing_images,testing_labels=Grouping(data[data["Usage"]=="PublicTest"])

print("training images shape", np.shape(training_images))
print("validation images shape", np.shape(validation_images))
print("testing images shape", np.shape(testing_images))

model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=5,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

model.save('Face Emotion Detection.h5')

cnn=load_model('/content/drive/MyDrive/Model/Face Emotion Detection.h5')

Testing_Loss_and_accuracy=cnn.evaluate(testing_images/255,testing_labels)

print(Testing_Loss_and_accuracy)

from keras.preprocessing.image import ImageDataGenerator
real_test_datagen = ImageDataGenerator(rescale=1./255)
image_size=(48,48)
new_data = real_test_datagen.flow_from_directory('/content/drive/MyDrive/test',target_size = image_size,batch_size = 32,class_mode='categorical',color_mode = 'grayscale',shuffle=False )

new_data.reset()
Y_pred = cnn.predict_generator(new_data)
classes = new_data.classes[new_data.index_array]
y_pred = np.argmax(Y_pred, axis= -1)

def emotion(probabilities):
    max_probability_value=-1
    max_probability_index=-1
    for i in range(len(probabilities)):
        if (probabilities[i] > max_probability_value):
            max_probability_index = i
            max_probability_value = probabilities[i]
    print('Emotion:',emotions[max_probability_index])
    print('Probablity=',max_probability_value )

image=cv2.imread('/content/drive/MyDrive/test/class/FEAR2.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[0])

image=cv2.imread('/content/drive/MyDrive/test/class/angry2.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[1])

image=cv2.imread('/content/drive/MyDrive/test/class/disgust1.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[2])

image=cv2.imread('/content/drive/MyDrive/test/class/happy1.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[3])

image=cv2.imread('/content/drive/MyDrive/test/class/normal1.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[4])

image=cv2.imread('/content/drive/MyDrive/test/class/sad1.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[7])

image=cv2.imread('/content/drive/MyDrive/test/class/surprise.png')
plt.imshow(image)
plt.show()
emotion(Y_pred[9])