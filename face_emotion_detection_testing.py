# -*- coding: utf-8 -*-
"""Face emotion detection testing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WASTGakF5vL5dEbTz_WQtu1zT9Op9dZ8
"""

import pandas as pd 
import numpy as np
from tensorflow import keras
from keras import models, layers
from keras.models import Sequential,load_model
from keras.layers import Conv2D,MaxPooling2D,BatchNormalization,Dense,Dropout,Activation,Flatten
import cv2
from matplotlib import pyplot as plt
from keras.losses import categorical_crossentropy
from keras.optimizers import Adam
from keras.regularizers import l2

data=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/dataset.csv/fer2013.csv')
emotions={0:'Angry',1:'Disgust',2:'Fear',3:'Happy',4:'Sad',5:'Surprise',6: 'Normal'}

from google.colab import drive
drive.mount('/content/drive')

def Grouping(data):
    image_arr=np.zeros(shape=(len(data), 48, 48, 1))
    image_lab=np.array(list(map(int, data['emotion'])))
    for i, row in enumerate(data.index):
        org_image=np.fromstring(data.loc[row,'pixels'],dtype=int,sep=' ')
        dup_image=np.reshape(org_image, (48, 48, 1))
        image_arr[i] = dup_image   
    return image_arr,image_lab
training_images,training_labels = Grouping(data[data["Usage"]=="Training"])
validation_images,validation_labels =Grouping(data[data["Usage"]=="PrivateTest"])
testing_images,testing_labels=Grouping(data[data["Usage"]=="PublicTest"])

cnn=load_model('/content/drive/MyDrive/Model/Face Emotion Detection.h5')

Testing_Loss_and_accuracy=cnn.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)



# Experiment -1
# Increasing all dropout values to 0.6
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.6))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.6))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.6))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.6))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.6))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.6))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.6))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)

#Experiment-2
# Decreasing dropout value to 0.3
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.3))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.3))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.3))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.3))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)

#experiment-3
#changing the activation function from relu to tanh
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='tanh',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='tanh',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(128,kernel_size=(3,3),activation='tanh',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='tanh', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(256,kernel_size=(3,3),activation='tanh',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='tanh',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(512,kernel_size=(3,3),activation='tanh',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='tanh',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(512,activation='tanh'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='tanh'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='tanh'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)

# Experiment-4
# By adding one hidden layer
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)

#Experiment-5
# By adding 3 hidden layers with 512,256 and 128 nodes respectively
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)

# Experiment-6
# By adding a convolutional layer
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(1024,kernel_size=(3,3),activation='relu',padding='same'))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)

#Experiment-7
#By removing two convolution layers and one maxpooling layer
model=Sequential()
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(48,48, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(128,kernel_size=(3,3),activation='relu', padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(256,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(512,kernel_size=(3,3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(512,kernel_size=(3, 3),activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.5))
model.add(Conv2D(1024,kernel_size=(3,3),activation='relu',padding='same'))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))
model.summary()

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])

model.fit((training_images)/255, training_labels,epochs=50,batch_size=32,validation_data=((validation_images)/255, validation_labels), verbose=1)

Testing_Loss_and_accuracy=model.evaluate(testing_images/255,testing_labels)
print(Testing_Loss_and_accuracy)